@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    ViewData["Title"] = $"{Configuration.GetSection( "AppSettings" )["CompanyName"]} HelpDesk";
}

<div style="text-align: center;" >
    <h1>Welcome to @Configuration.GetSection( "AppSettings" )["CompanyName"] Helpdesk portal</h1>
    @if (null != ViewData["displayName"]) {
        <h3>Welcome @ViewData["displayName"]</h3>
    }
    <div id="message-wrapper" class="margin-bottom-25 margin-top-25">
        <div id="message">@ViewData["message"]</div>
    </div>

    <div id="card-1" class="verification-card">
        <button type="button" id="get-vc" class="button">Step 1: Get your card at MyAccount to prove your employment</button>
        <p>To get support, you need to have your <a href="https://learn.microsoft.com/en-us/entra/verified-id/verifiable-credentials-configure-tenant-quick#myaccount-available-now-to-simplify-issuance-of-workplace-credentials" target="_blank">
            VerifiedEmployee card</a> with a photo.</p>
        <div>
            <a id="have-verifiedemployeeI"><img width="177px" src="~/verifiedemployee-card.png" /></a>
            <br />
            <a id="have-verifiedemployee" class="skipButton">I already have my card</a>
        </div>
    </div>

    <div id="card-2" class="verification-card">
        <button type="button" id="verify-credential" class="button">Step 2: Present your VerifiedEmployee card</button>
        <p>Use the Authenticator to present your VerifiedEmployee card</p>
        <div id="qrcode" style="text-align:center"></div>
        <a id="check-result" class="skipButton" style="display:none">Continue</a>
    </div>

    <div id="card-3" class="verification-card">
        <div id="authAppMessage" class="waitingForAuthApp">Step 3: Get support</div>
        <div id="apps-button-wrapper" class="appsWrapper" style="display:none;">
            <p>You have successfully been verified. Please wait and a support personnel will be with you shortly.</p>            
            <ul>
                <li>Email:<div id="userUpn" class="monospacedText"></div></li>
                <li>Name:<div id="userName" class="monospacedText"></div></li>
                <li>Face check score:<div id="faceScore" class="monospacedText"></div></li>
            </ul>
            <br>
            <!-- to make it obvious that this is a demo site -->
            <p class="marquee">
                This is a demo site. You will not be contacted by a support personnel.
            </p>
        </div>
    </div>


    <script src="~/js/qrcode.min.js"></script>
    <script src="~/js/verifiedid.requestservice.client.js"></script>
    <script src="~/js/verifiedid.uihandler.js"></script>
    <!-- js for Teams Webhook -->
    <script src="https://unpkg.com/teams-web-send@0.1.1/dist/tws.umd.production.min.js"></script>

    <script>
        var qrcode = new QRCode("qrcode", { width: 150, height: 150 });

        function dimCard(id) {
            document.getElementById(id).style.opacity = 0.5;
            document.getElementById(id).style.background = "darkgray";
        }
        function focusCard(id) {
            document.getElementById(id).style.opacity = 1.0;
            document.getElementById(id).style.background = "white";
        }
        function showCard(cardNo) {
            dimCard('card-1');
            dimCard('card-2');
            dimCard('card-3');
            if (cardNo != '') {
                focusCard(`card-${cardNo}`);
            }
        }

        document.getElementById('get-vc').addEventListener('click', () => {
            window.open('https://myaccount.microsoft.com', '_blank');
        });

        document.getElementById('verify-credential').addEventListener('click', () => {
            startVerification();
        });

        document.getElementById('have-verifiedemployee').addEventListener('click', () => {
            startVerification();
        });
        document.getElementById('have-verifiedemployeeI').addEventListener('click', () => {
            startVerification();
        });

        document.getElementById('check-result').addEventListener('click', () => {
            var requestId = document.getElementById('check-result').getAttribute('requestId');
            credentialPresented(requestId, { message: "Continuing" });
        });

        function startVerification() {
            showCard(2);
            requestService.onPresentationVerified = credentialPresented;
            requestService.createPresentationRequest();
        }

        // callback on presentation_verified
        function credentialPresented(requestId, response) {
            hideQRCode();
            displayMessage(response.message);
            document.getElementById('verify-credential').style.display = ""
            document.getElementById('check-result').style.display = "none";
            processPresentedCredentials(requestId);
        }

        function processPresentedCredentials(requestId) {
            document.getElementById('message').innerHTML = "Processing request. Please wait...";
            showCard(3);
            fetch('/api/processpresentedcredentials/' + requestId, { method: 'POST' })
                .then(response => response.text())
                .catch(error => document.getElementById("message").innerHTML = error)
                .then(response => {
                    if (response.length > 0) {
                        console.log(response);
                        respMsg = JSON.parse(response);
                        if (respMsg.status == 'user_authenticated') {
                            document.getElementById('message').innerHTML = "Verification successful. Support would be on its way if this was a real helpdesk site.";
                            document.getElementById('userUpn').innerHTML = respMsg.email;
                            document.getElementById('userName').innerHTML = respMsg.displayName;
                            document.getElementById('faceScore').innerHTML = respMsg.matchConfidenceScore + "%";
                            document.getElementById('apps-button-wrapper').style.display = "block";
                            if ("true" == "@Configuration.GetSection( "AppSettings" )["UseTeamsWebhook"]".toLowerCase() ) {
                                sendHelpdeskRequestNotoficationToTeams(respMsg.displayName, respMsg.email, respMsg.matchConfidenceScore)
                            }
                        } else {
                            document.getElementById('message').innerHTML = respMsg.error_description;
                        }
                    }
                })
        }

        // This function sends a message via a webhook to a Teams channel
        function sendHelpdeskRequestNotoficationToTeams( displayName, email, matchConfidenceScore ) {
            var formatted_Card_Payload = JSON.stringify({
                'type': 'message',
                'attachments': [
                    {
                        'contentType': 'application/vnd.microsoft.card.adaptive',
                        'content': {
                            'type': 'AdaptiveCard',
                            'body': [
                                { 'type': 'TextBlock', 'text': "Presentation Verified for: " + displayName },
                                { 'type': 'TextBlock', 'text': "Email: " + email },
                                { 'type': 'TextBlock', 'text': "Face Check score: " + matchConfidenceScore + "%" }                                
                            ],
                            '$schema': 'http://adaptivecards.io/schemas/adaptive-card.json',
                            'version': '1.0'
                        }
                    }
                ]
            });

            (() => {
                const sendMessage = window.tws.bootstrap();
                sendMessage('@Configuration.GetSection( "AppSettings" )["TeamsWebhookURL"]', formatted_Card_Payload ).then(() => {
                    console.info('Message sent!')
                });
            })();
        }

        showCard(1);
    </script>
</div>
